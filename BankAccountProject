import java.util.ArrayList;
import java.util.List;

//checklist for concepts
//1. Inheritance = done 
//2. Encapsulation (have the get but not the set)
//3. Polymorphism = need have same method do different things for client vs employee
//4. abstraction = abstraction is more of a guideline/blue print remember for how methods are supposed to be to give code structure (abstract keyword override method...) still don't fully understand this it's using interface then implements abstract classes..
                    //There can be no object of an abstract class. 

///------------ABSTRACTION
// interface BankAccount {
//     void deposit(double amount);
//     void withdraw(double amount);
//     double getBalance();
// }

// // Concrete implementation of Bank Account
// class SavingsAccount implements BankAccount {
//     private double balance;


class Account {
    // String title; 
    // String author; 
    // String genre; 
    // double price; 
 
    //  void buyBook() {
    //      System.out.println("this is a book");
    //  }

    //  public String getTitle(){
    //     return title;
    //  }
     
    //  public void setTitle(String newTitle){
    //     this.title = newTitle; 
    //  }
 }

  class SavingsAccount extends Account {
    //  @Override
    //  void buyBook() {
    //     //  System.out.println("Harry Potter");
    //     //  System.out.println("Twilight");
    //  }
 }
 
 class CheckingAccount extends Account {
    //  @Override
    //  void buyBook() {
    //     //  System.out.println("Biography of Winston Churchil");
    //     //  System.out.println("WWII");
    //  }
 }


 class Users {

    // String name; 
    // String email; 
    // String password; 

    // public String getName(){
    //     return name;
    //  }
     
    //  public void setName(String newName){
    //     this.name = newName; 
    //  }

 } 

 class Employee extends Users {

    // String name; 
    // String email; 
    // String password; 

    // public String getName(){
    //     return name;
    //  }
     
    //  public void setName(String newName){
    //     this.name = newName; 
    //  }

 } 

 class Customer extends Users  {

    // String name; 
    // String email; 
    // String password; 

    // public String getName(){
    //     return name;
    //  }
     
    //  public void setName(String newName){
    //     this.name = newName; 
    //  }

 } 


 //java.util.list is an interface java so we have to use an array list 

 class shoppingCart {

    // ArrayList<String> purchasedBooks = new ArrayList<String>();

    // //purchasedBooks.add("Harry Potter");

 } 
 
 class Catalog{

    // ArrayList<String> myCatalog = new ArrayList<String>(); //using new here I am initializing the instance variable 
    // //this.add("Harry Potter");
    // //need a constructor here to intitialize the instance variables or may get an error 
 
    // public void addElementToList(String element) {
    //     myCatalog.add(element); //ADD then we don't need a SETTER? 
    // }

    // public String getElementFromList(int index) {
    //      return myCatalog.get(index);
    // }

    // public void showCatalog() {
    //     for(int index = 0; index < myCatalog.size(); index ++) {
    //         System.out.println(index + 1 + " " + myCatalog.get(index));
    //     }
    // }
     
}

//can only call the super class -


 public class App {
     public static void main(String[] args) {

        System.out.println("test");
        
        //  Book fictionBooks = new FictionBook();
        //  Book nonFictionBooks = new NonFictionBook();
        //  Catalog myCatalog = new Catalog();  //cannot do Book myOrder since you are callling the same page 
        
        //  myCatalog.addElementToList("Harry potter");
        //  myCatalog.addElementToList("Twightlight");
        //  myCatalog.addElementToList("WWII");

        //  System.out.println("Welcome user! The available books are: ");

        //  fictionBooks.buyBook();  // Output: The dog barks.

        //  nonFictionBooks.buyBook();  // Output: The cat meows.

        //  System.out.println("What book would you like to order? ");
         
        //  System.out.println(myCatalog.getElementFromList(0));

        // myCatalog.showCatalog();
        //  // System.out.println(myCatalog.showCatalog()); THIS DOES NOTT WORK JUST GET RID OF PRINTLN SINCE UR NOT GIVING INFORMATIOON
        

   //
  }
 }

